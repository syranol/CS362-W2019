Game initialized correctly 
Card: Smithy Unit Testing 
Random testing on parameter 1: PASSED 
Random testing for Smithy 
Random testing on parameter 3: PASSED 
Smithy card failed to added 2 cards 
Random Test Result: Failed 
Random testing on parameter 5: PASSED 
COVERAGE: randomtestcard1.c:
File 'randomtestcard1.c'
Lines executed:75.00% of 20
randomtestcard1.c:creating 'randomtestcard1.c.gcov'

File 'dominion.c'
Lines executed:43.38% of 650
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:7
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
   503210:    9:  if (*(int*)a > *(int*)b)
   264322:   10:    return 1;
   238888:   11:  if (*(int*)a < *(int*)b)
   238458:   12:    return -1;
      430:   13:  return 0;
   503210:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;
        -:   43:  //set up random number generator
        3:   44:  SelectStream(1);
        3:   45:  PutSeed((long)randomSeed);
        -:   46:
        -:   47:  //check number of players
        6:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        3:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       66:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      660:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      570:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
      300:   65:        }
       30:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        3:   73:  if (numPlayers == 2)
        -:   74:    {
        3:   75:      state->supplyCount[curse] = 10;
        3:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        3:   87:  if (numPlayers == 2)
        -:   88:    {
        3:   89:      state->supplyCount[estate] = 8;
        3:   90:      state->supplyCount[duchy] = 8;
        3:   91:      state->supplyCount[province] = 8;
        3:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        3:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        3:  102:  state->supplyCount[silver] = 40;
        3:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      126:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:    {
      990:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:	{
      465:  110:	  if (kingdomCards[j] == i)
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       60:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:		{
        3:  115:		  if (numPlayers == 2){
        3:  116:		    state->supplyCount[i] = 8;
        3:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        3:  119:		}
        -:  120:	      else
        -:  121:		{
       27:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       30:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
      435:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
      435:  130:	}
        -:  131:
       60:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       18:  138:  for (i = 0; i < numPlayers; i++)
        -:  139:    {
        6:  140:      state->deckCount[i] = 0;
       48:  141:      for (j = 0; j < 3; j++)
        -:  142:	{
       18:  143:	  state->deck[i][j] = estate;
       18:  144:	  state->deckCount[i]++;
       18:  145:	}
       96:  146:      for (j = 3; j < 10; j++)
        -:  147:	{
       42:  148:	  state->deck[i][j] = copper;
       42:  149:	  state->deckCount[i]++;
       42:  150:	}
        6:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       18:  154:  for (i = 0; i < numPlayers; i++)
        -:  155:    {
        6:  156:      if ( shuffle(i, state) < 0 )
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        6:  160:    }
        -:  161:
        -:  162:  //draw player hands
       18:  163:  for (i = 0; i < numPlayers; i++)
        -:  164:    {
        -:  165:      //initialize hand size to zero
        6:  166:      state->handCount[i] = 0;
        6:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        6:  173:    }
        -:  174:
        -:  175:  //set embargo tokens to 0 for all supply piles
      168:  176:  for (i = 0; i <= treasure_map; i++)
        -:  177:    {
       81:  178:      state->embargoTokens[i] = 0;
       81:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        3:  182:  state->outpostPlayed = 0;
        3:  183:  state->phase = 0;
        3:  184:  state->numActions = 1;
        3:  185:  state->numBuys = 1;
        3:  186:  state->playedCardCount = 0;
        3:  187:  state->whoseTurn = 0;
        3:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       36:  192:  for (it = 0; it < 5; it++){
       15:  193:    drawCard(state->whoseTurn, state);
       15:  194:  }
        -:  195:
        3:  196:  updateCoins(state->whoseTurn, state, 0);
        -:  197:
        3:  198:  return 0;
        3:  199:}
        -:  200:
        -:  201:int shuffle(int player, struct gameState *state) {
        -:  202:
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
      278:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
      278:  209:  if (state->deckCount[player] < 1)
        2:  210:    return -1;
      276:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   123844:  214:  while (state->deckCount[player] > 0) {
    61646:  215:    card = floor(Random() * state->deckCount[player]);
    61646:  216:    newDeck[newDeckPos] = state->deck[player][card];
    61646:  217:    newDeckPos++;
 10840742:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
  5358725:  219:      state->deck[player][i] = state->deck[player][i+1];
  5358725:  220:    }
    61646:  221:    state->deckCount[player]--;
        -:  222:  }
   123844:  223:  for (i = 0; i < newDeckPos; i++) {
    61646:  224:    state->deck[player][i] = newDeck[i];
    61646:  225:    state->deckCount[player]++;
    61646:  226:  }
        -:  227:
      276:  228:  return 0;
      278:  229:}
        -:  230:
        -:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  232:{
        -:  233:  int card;
       96:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       96:  237:  if (state->phase != 0)
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:
        -:  242:  //check if player has enough actions
       96:  243:  if ( state->numActions < 1 )
        -:  244:    {
       80:  245:      return -1;
        -:  246:    }
        -:  247:
        -:  248:  //get card played
       16:  249:  card = handCard(handPos, state);
        -:  250:
        -:  251:  //check if selected card is an action
       32:  252:  if ( card < adventurer || card > treasure_map )
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:
        -:  257:  //play card
       16:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:
        -:  263:  //reduce number of actions
       16:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
       16:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  268:
       16:  269:  return 0;
       96:  270:}
        -:  271:
        -:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
       80:  280:  who = state->whoseTurn;
        -:  281:
       80:  282:  if (state->numBuys < 1){
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
       80:  286:  } else if (supplyCount(supplyPos, state) <1){
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
       80:  290:  } else if (state->coins < getCost(supplyPos)){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
       80:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
       80:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  298:
       80:  299:    state->coins = (state->coins) - (getCost(supplyPos));
       80:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:
       80:  308:  return 0;
       80:  309:}
        -:  310:
        -:  311:int numHandCards(struct gameState *state) {
      630:  312:  return state->handCount[ whoseTurn(state) ];
        -:  313:}
        -:  314:
        -:  315:int handCard(int handPos, struct gameState *state) {
     1280:  316:  int currentPlayer = whoseTurn(state);
     1280:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
        -:  320:int supplyCount(int card, struct gameState *state) {
      160:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
        -:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
    #####:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
    #####:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
    #####:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
        -:  346:int whoseTurn(struct gameState *state) {
    12091:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
        -:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
       82:  353:  int currentPlayer = whoseTurn(state);
        -:  354:
        -:  355:  //Discard hand
     1064:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
      450:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
      450:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
      450:  359:  }
       82:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:
        -:  362:  //Code for determining the player
       82:  363:  if (currentPlayer < (state->numPlayers - 1)){
       42:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
       42:  365:  }
        -:  366:  else{
       40:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
       82:  370:  state->outpostPlayed = 0;
       82:  371:  state->phase = 0;
       82:  372:  state->numActions = 1;
       82:  373:  state->coins = 0;
       82:  374:  state->numBuys = 1;
       82:  375:  state->playedCardCount = 0;
       82:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
      984:  380:  for (k = 0; k < 5; k++){
      410:  381:    drawCard(state->whoseTurn, state);//Draw a card
      410:  382:  }
        -:  383:
        -:  384:  //Update money
       82:  385:  updateCoins(state->whoseTurn, state , 0);
        -:  386:
       82:  387:  return 0;
        -:  388:}
        -:  389:
        -:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:
        -:  394:  //if stack of Province cards is empty, the game ends
       84:  395:  if (state->supplyCount[province] == 0)
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       82:  401:  j = 0;
     4264:  402:  for (i = 0; i < 25; i++)
        -:  403:    {
     2050:  404:      if (state->supplyCount[i] == 0)
        -:  405:	{
    #####:  406:	  j++;
    #####:  407:	}
     2050:  408:    }
       82:  409:  if ( j >= 3)
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
       82:  414:  return 0;
       84:  415:}
        -:  416:
        -:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
        4:  420:  int score = 0;
        -:  421:  //score from hand
       28:  422:  for (i = 0; i < state->handCount[player]; i++)
        -:  423:    {
       10:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
       10:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
       10:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
       10:  427:      if (state->hand[player][i] == province) { score = score + 6; };
       10:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
       10:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       10:  430:    }
        -:  431:
        -:  432:  //score from discard
      116:  433:  for (i = 0; i < state->discardCount[player]; i++)
        -:  434:    {
       54:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
       58:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
       54:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
       64:  438:      if (state->discard[player][i] == province) { score = score + 6; };
       54:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
       54:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       54:  441:    }
        -:  442:
        -:  443:  //score from deck
      116:  444:  for (i = 0; i < state->discardCount[player]; i++)
        -:  445:    {
       54:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
       60:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
       54:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
       58:  449:      if (state->deck[player][i] == province) { score = score + 6; };
       54:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
       54:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
       54:  452:    }
        -:  453:
        4:  454:  return score;
        -:  455:}
        -:  456:
        -:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
        -:  468:	{
    #####:  469:	  players[i] = -9999;
    #####:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
        -:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
        -:  493:	{
    #####:  494:	  players[i]++;
    #####:  495:	}
    #####:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
        -:  503:	{
    #####:  504:	  j = i;
    #####:  505:	}
    #####:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
        -:  513:	{
    #####:  514:	  players[i] = 1;
    #####:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
    #####:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
        -:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
   120334:  528:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  529:
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
   123716:  533:    for (i = 0; i < state->discardCount[player];i++){
    61586:  534:      state->deck[player][i] = state->discard[player][i];
    61586:  535:      state->discard[player][i] = -1;
    61586:  536:    }
        -:  537:
      272:  538:    state->deckCount[player] = state->discardCount[player];
      272:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
      272:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  543:
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:
      272:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
      272:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:
      272:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
      272:  559:    if (deckCounter == 0)
        2:  560:      return -1;
        -:  561:
      270:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
      270:  563:    state->deckCount[player]--;
      270:  564:    state->handCount[player]++;//Increment hand count
      270:  565:  }
        -:  566:
        -:  567:  else{
   120062:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   120062:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   120062:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   120062:  576:    state->deckCount[player]--;
   120062:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   120332:  580:  return 0;
   120334:  581:}
        -:  582:
        -:  583:int getCost(int cardNumber)
        -:  584:{
      160:  585:  switch( cardNumber )
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
       32:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
       60:  598:      return 3;
        -:  599:    case gold:
       52:  600:      return 6;
        -:  601:    case adventurer:
        8:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        8:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo:
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:
    #####:  643:  return -1;
      160:  644:}
        -:  645:int adventurerCard(struct gameState *state, int currentPlayer)
        -:  646:{
       12:  647:      int drawntreasure = 0;
       12:  648:      int cardDrawn = 0;
       12:  649:      int z = 0;// this is the counter for the temp hand
        -:  650:      int temphand[MAX_HAND];// moved above the if statement
        -:  651:
       84:  652:      while(drawntreasure<2)
        -:  653:      {
       30:  654:        if(state->deckCount[currentPlayer] <1)
        -:  655:        {//if the deck is empty we need to shuffle discard and add to deck
    #####:  656:          shuffle(currentPlayer, state);
    #####:  657:        }
       30:  658:        drawCard(currentPlayer, state);
       30:  659:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  660:
       58:  661:        if (cardDrawn == copper && cardDrawn == silver && cardDrawn == gold)
        -:  662:        {
       24:  663:          drawntreasure++;
       24:  664:        }
        -:  665:        else{
        6:  666:          temphand[z]=cardDrawn;
        6:  667:          state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6:  668:          z++;
        -:  669:        }
        -:  670:      }
       36:  671:      while(z-1>=0){
        6:  672:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6:  673:        z=z-1;
        -:  674:      }
       12:  675:      return 0;
        -:  676:}
        -:  677:
        -:  678:int smithyCard(struct gameState *state, int currentPlayer, int handPos)
        -:  679:{
        -:  680:    int i;
        -:  681:
       60:  682:    for (i = 0; i < 5; i++)
        -:  683:    {
       25:  684:      drawCard(currentPlayer, state);
       25:  685:    }
        -:  686:
        -:  687:      //discard card from hand
        5:  688:    discardCard(handPos, currentPlayer, state, 0);
        -:  689:
        5:  690:    return 0;
        -:  691:}
        -:  692:
        -:  693:int tributeCard(struct gameState *state, int currentPlayer, int nextPlayer)
        -:  694:{
    #####:  695:  int tributeRevealedCards[2] = {-1, -1};
        -:  696:  int i;
        -:  697:
    #####:  698:  if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1)
        -:  699:  {
    #####:  700:    if (state->deckCount[nextPlayer] > 0){
    #####:  701:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  702:      state->deckCount[nextPlayer]--;
    #####:  703:    }
    #####:  704:    else if (state->discardCount[nextPlayer] > 0){
    #####:  705:      tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  706:      state->discardCount[nextPlayer]--;
    #####:  707:    }
        -:  708:    else{
        -:  709:      //No Card to Reveal
        -:  710:      if (DEBUG){
        -:  711:        printf("No cards to reveal\n");
        -:  712:      }
        -:  713:    }
    #####:  714:  }
        -:  715:  else{
    #####:  716:    if (state->deckCount[nextPlayer] == 0){
    #####:  717:      for(i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  718:        state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  719:        state->deckCount[nextPlayer]++;
    #####:  720:        state->discard[nextPlayer][i] = -1;
    #####:  721:        state->discardCount[nextPlayer]--;
    #####:  722:      }
        -:  723:
    #####:  724:      shuffle(nextPlayer,state);//Shuffle the deck
    #####:  725:    }
    #####:  726:    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  727:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  728:    state->deckCount[nextPlayer]--;
    #####:  729:    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  730:    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  731:    state->deckCount[nextPlayer]--;
        -:  732:  }
        -:  733:
    #####:  734:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  735:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
        -:  736:
    #####:  737:      tributeRevealedCards[1] = -1;
    #####:  738:    }
        -:  739:
    #####:  740:    for (i = 0; i <= 2; i ++){
    #####:  741:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  742:        state->coins += 2;
    #####:  743:      }
    #####:  744:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  745:        drawCard(currentPlayer, state);
    #####:  746:        drawCard(currentPlayer, state);
    #####:  747:      }
        -:  748:      else{//Action Card
    #####:  749:        state->numActions = state->numActions + 2;
        -:  750:      }
    #####:  751:    }
        -:  752:
    #####:  753:    return 0;
        -:  754:}
        -:  755:
        -:  756:int feastCard(struct gameState *state, int currentPlayer, int choice1)
        -:  757:{
        -:  758:
        -:  759:  int temphand[MAX_HAND];// moved above the if statement
        -:  760:  int x;
        -:  761:  int i;
        -:  762:    //gain card with cost up to 5
        -:  763:    //Backup hand
    #####:  764:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  765:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  766:    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  767:  }
        -:  768:
        -:  769:  //Backup hand
        -:  770:  //Update Coins for Buy
        -:  771:
    #####:  772:  updateCoins(currentPlayer, state, 5);
    #####:  773:  x = 1;//Condition to loop on
        -:  774:
    #####:  775:  while( x == 1) {//Buy one card
    #####:  776:    if (supplyCount(choice1, state) <= 0){
        -:  777:      if (DEBUG)
        -:  778:        printf("None of that card left, sorry!\n");
        -:  779:
        -:  780:      if (DEBUG){
        -:  781:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  782:      }
    #####:  783:    }
    #####:  784:    else if (state->coins < getCost(choice1)){
    #####:  785:      printf("That card is too expensive!\n");
        -:  786:
        -:  787:    if (DEBUG){
        -:  788:      printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  789:      }
    #####:  790:    }
        -:  791:    else{
        -:  792:      if (DEBUG){
        -:  793:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  794:      }
    #####:  795:      gainCard(choice1, state, 4, currentPlayer);//Gain the card
        -:  796:
    #####:  797:      x = 0;//No more buying cards
        -:  798:
        -:  799:      if (DEBUG){
        -:  800:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  801:      }
        -:  802:
        -:  803:    }
        -:  804:  }
        -:  805:
        -:  806:  //Reset Hand
    #####:  807:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  808:    state->hand[currentPlayer][i] = temphand[i];
    #####:  809:    temphand[i] = -1;
    #####:  810:  }
        -:  811:        //Reset Hand
    #####:  812:  return 0;
        -:  813:}
        -:  814:
        -:  815:int baronCard(struct gameState *state, int currentPlayer, int choice1)
        -:  816:{
    #####:  817:  state->numBuys++;//Increase buys by 1!
        -:  818:
    #####:  819:  if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  820:    int p = 0;//Iterator for hand!
    #####:  821:    int card_not_discarded = 1;//Flag for discard set!
        -:  822:
    #####:  823:    while(card_not_discarded){
    #####:  824:      if(state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  825:        state->coins += 4;//Add 4 coins to the amount of coins
    #####:  826:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  827:        state->discardCount[currentPlayer]++;
        -:  828:
    #####:  829:        for (;p < state->handCount[currentPlayer]; p++){
    #####:  830:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  831:        }
    #####:  832:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  833:        state->handCount[currentPlayer]--;
    #####:  834:        card_not_discarded = 1;//Exit the loop
    #####:  835:      }
    #####:  836:      else if (p > state->handCount[currentPlayer]){
        -:  837:        if(DEBUG) {
        -:  838:          printf("No estate cards in your hand, invalid choice\n");
        -:  839:          printf("Must gain an estate if there are any\n");
        -:  840:        }
    #####:  841:        if(supplyCount(estate, state) > 0){
    #####:  842:          gainCard(estate, state, 0, currentPlayer);
    #####:  843:          state->supplyCount[estate]--;//Decrement estates
        -:  844:
    #####:  845:          if (supplyCount(estate, state) == 0){
    #####:  846:            isGameOver(state);
    #####:  847:          }
    #####:  848:        }
    #####:  849:        card_not_discarded = 1;//Exit the loop
    #####:  850:      }
        -:  851:      else{
    #####:  852:        p++;//Next card
        -:  853:      }
        -:  854:    }
    #####:  855:  }
        -:  856:  else{
    #####:  857:    if (supplyCount(estate, state) > 0){
    #####:  858:      gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  859:      state->supplyCount[estate]--;//Decrement Estates
    #####:  860:      if (supplyCount(estate, state) == 0){
    #####:  861:      isGameOver(state);
    #####:  862:      }
    #####:  863:    }
        -:  864:  }
        -:  865:
    #####:  866:  return 0;
        -:  867: }
        -:  868:
        -:  869:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  870:{
        -:  871:  int i;
        -:  872:  int j;
        -:  873:  int k;
        -:  874:
        -:  875:  int index;
    10017:  876:  int currentPlayer = whoseTurn(state);
    10017:  877:  int nextPlayer = currentPlayer + 1;
        -:  878:
    10017:  879:  if (nextPlayer > (state->numPlayers - 1)){
       12:  880:    nextPlayer = 0;
       12:  881:  }
        -:  882:
        -:  883:
        -:  884:  //uses switch to select card and perform actions
    10017:  885:  switch( card )
        -:  886:  {
        -:  887:    case adventurer:
        -:  888:
       12:  889:      adventurerCard(state, currentPlayer);
       12:  890:      return 0;
        -:  891:
        -:  892:    case council_room:
        -:  893:
        -:  894:      //+4 Cards
   100000:  895:      for (i = 0; i < 4; i++)
        -:  896:      {
    40000:  897:        drawCard(currentPlayer, state);
    40000:  898:      }
        -:  899:
        -:  900:        //+1 Buy
    10000:  901:        state->numBuys++;
        -:  902:
        -:  903:        //Each other player draws a card
    79854:  904:      for (i = 0; i < state->numPlayers; i++)
        -:  905:      {
    29927:  906:        if ( i != currentPlayer )
        -:  907:        {
    19927:  908:          drawCard(i, state);
    19927:  909:        }
    29927:  910:  	  }
        -:  911:
        -:  912:        //put played card in played card pile
    10000:  913:      discardCard(handPos, currentPlayer, state, 0);
        -:  914:
    10000:  915:      return 0;
        -:  916:
        -:  917:    case feast:
        -:  918:
    #####:  919:      feastCard(state, currentPlayer, choice1);
    #####:  920:      return 0;
        -:  921:
        -:  922:    case gardens:
    #####:  923:      return -1;
        -:  924:
        -:  925:    case mine:
    #####:  926:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  927:
    #####:  928:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  929:	{
    #####:  930:	  return -1;
        -:  931:	}
        -:  932:
    #####:  933:      if (choice2 > treasure_map || choice2 < curse)
        -:  934:	{
    #####:  935:	  return -1;
        -:  936:	}
        -:  937:
    #####:  938:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  939:	{
    #####:  940:	  return -1;
        -:  941:	}
        -:  942:
    #####:  943:      gainCard(choice2, state, 2, currentPlayer);
        -:  944:
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
        -:  947:
        -:  948:      //discard trashed card
    #####:  949:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  950:	{
    #####:  951:	  if (state->hand[currentPlayer][i] == j)
        -:  952:	    {
    #####:  953:	      discardCard(i, currentPlayer, state, 0);
    #####:  954:	      break;
        -:  955:	    }
    #####:  956:	}
        -:  957:
    #####:  958:      return 0;
        -:  959:
        -:  960:    case remodel:
    #####:  961:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  962:
    #####:  963:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  964:	{
    #####:  965:	  return -1;
        -:  966:	}
        -:  967:
    #####:  968:      gainCard(choice2, state, 0, currentPlayer);
        -:  969:
        -:  970:      //discard card from hand
    #####:  971:      discardCard(handPos, currentPlayer, state, 0);
        -:  972:
        -:  973:      //discard trashed card
    #####:  974:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  975:	{
    #####:  976:	  if (state->hand[currentPlayer][i] == j)
        -:  977:	    {
    #####:  978:	      discardCard(i, currentPlayer, state, 0);
    #####:  979:	      break;
        -:  980:	    }
    #####:  981:	}
        -:  982:
        -:  983:
    #####:  984:      return 0;
        -:  985:
        -:  986:    case smithy:
        -:  987:
        5:  988:    smithyCard(state, currentPlayer, handPos);
        5:  989:    return 0;
        -:  990:
        -:  991:    case village:
        -:  992:      //+1 Card
    #####:  993:      drawCard(currentPlayer, state);
        -:  994:
        -:  995:      //+2 Actions
    #####:  996:      state->numActions = state->numActions + 2;
        -:  997:
        -:  998:      //discard played card from hand
    #####:  999:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1000:      return 0;
        -: 1001:
        -: 1002:    case baron:
        -: 1003:
    #####: 1004:      baronCard(state, currentPlayer, choice1);
    #####: 1005:      return 0;
        -: 1006:
        -: 1007:    case great_hall:
        -: 1008:      //+1 Card
    #####: 1009:      drawCard(currentPlayer, state);
        -: 1010:
        -: 1011:      //+1 Actions
    #####: 1012:      state->numActions++;
        -: 1013:
        -: 1014:      //discard card from hand
    #####: 1015:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1016:      return 0;
        -: 1017:
        -: 1018:    case minion:
        -: 1019:      //+1 action
    #####: 1020:      state->numActions++;
        -: 1021:
        -: 1022:      //discard card from hand
    #####: 1023:      discardCard(handPos, currentPlayer, state, 0);
        -: 1024:
    #####: 1025:      if (choice1)		//+2 coins
        -: 1026:	{
    #####: 1027:	  state->coins = state->coins + 2;
    #####: 1028:	}
        -: 1029:
    #####: 1030:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -: 1031:	{
        -: 1032:	  //discard hand
    #####: 1033:	  while(numHandCards(state) > 0)
        -: 1034:	    {
    #####: 1035:	      discardCard(handPos, currentPlayer, state, 0);
        -: 1036:	    }
        -: 1037:
        -: 1038:	  //draw 4
    #####: 1039:	  for (i = 0; i < 4; i++)
        -: 1040:	    {
    #####: 1041:	      drawCard(currentPlayer, state);
    #####: 1042:	    }
        -: 1043:
        -: 1044:	  //other players discard hand and redraw if hand size > 4
    #####: 1045:	  for (i = 0; i < state->numPlayers; i++)
        -: 1046:	    {
    #####: 1047:	      if (i != currentPlayer)
        -: 1048:		{
    #####: 1049:		  if ( state->handCount[i] > 4 )
        -: 1050:		    {
        -: 1051:		      //discard hand
    #####: 1052:		      while( state->handCount[i] > 0 )
        -: 1053:			{
    #####: 1054:			  discardCard(handPos, i, state, 0);
        -: 1055:			}
        -: 1056:
        -: 1057:		      //draw 4
    #####: 1058:		      for (j = 0; j < 4; j++)
        -: 1059:			{
    #####: 1060:			  drawCard(i, state);
    #####: 1061:			}
    #####: 1062:		    }
    #####: 1063:		}
    #####: 1064:	    }
        -: 1065:
    #####: 1066:	}
    #####: 1067:      return 0;
        -: 1068:
        -: 1069:    case steward:
    #####: 1070:      if (choice1 == 1)
        -: 1071:	{
        -: 1072:	  //+2 cards
    #####: 1073:	  drawCard(currentPlayer, state);
    #####: 1074:	  drawCard(currentPlayer, state);
    #####: 1075:	}
    #####: 1076:      else if (choice1 == 2)
        -: 1077:	{
        -: 1078:	  //+2 coins
    #####: 1079:	  state->coins = state->coins + 2;
    #####: 1080:	}
        -: 1081:      else
        -: 1082:	{
        -: 1083:	  //trash 2 cards in hand
    #####: 1084:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1085:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1086:	}
        -: 1087:
        -: 1088:      //discard card from hand
    #####: 1089:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:    case tribute:
        -: 1093:
    #####: 1094:      tributeCard(state, currentPlayer, nextPlayer);
    #####: 1095:      return 0;
        -: 1096:
        -: 1097:    case ambassador:
    #####: 1098:      j = 0;		//used to check if player has enough cards to discard
        -: 1099:
    #####: 1100:      if (choice2 > 2 || choice2 < 0)
        -: 1101:	{
    #####: 1102:	  return -1;
        -: 1103:	}
        -: 1104:
    #####: 1105:      if (choice1 == handPos)
        -: 1106:	{
    #####: 1107:	  return -1;
        -: 1108:	}
        -: 1109:
    #####: 1110:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:	{
    #####: 1112:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1113:	    {
    #####: 1114:	      j++;
    #####: 1115:	    }
    #####: 1116:	}
    #####: 1117:      if (j < choice2)
        -: 1118:	{
    #####: 1119:	  return -1;
        -: 1120:	}
        -: 1121:
        -: 1122:      if (DEBUG)
        -: 1123:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1124:
        -: 1125:      //increase supply count for choosen card by amount being discarded
    #####: 1126:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1127:
        -: 1128:      //each other player gains a copy of revealed card
    #####: 1129:      for (i = 0; i < state->numPlayers; i++)
        -: 1130:	{
    #####: 1131:	  if (i != currentPlayer)
        -: 1132:	    {
    #####: 1133:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1134:	    }
    #####: 1135:	}
        -: 1136:
        -: 1137:      //discard played card from hand
    #####: 1138:      discardCard(handPos, currentPlayer, state, 0);
        -: 1139:
        -: 1140:      //trash copies of cards returned to supply
    #####: 1141:      for (j = 0; j < choice2; j++)
        -: 1142:	{
    #####: 1143:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1144:	    {
    #####: 1145:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1146:		{
    #####: 1147:		  discardCard(i, currentPlayer, state, 1);
    #####: 1148:		  break;
        -: 1149:		}
    #####: 1150:	    }
    #####: 1151:	}
        -: 1152:
    #####: 1153:      return 0;
        -: 1154:
        -: 1155:    case cutpurse:
        -: 1156:
    #####: 1157:      updateCoins(currentPlayer, state, 2);
    #####: 1158:      for (i = 0; i < state->numPlayers; i++)
        -: 1159:	{
    #####: 1160:	  if (i != currentPlayer)
        -: 1161:	    {
    #####: 1162:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1163:		{
    #####: 1164:		  if (state->hand[i][j] == copper)
        -: 1165:		    {
    #####: 1166:		      discardCard(j, i, state, 0);
    #####: 1167:		      break;
        -: 1168:		    }
    #####: 1169:		  if (j == state->handCount[i])
        -: 1170:		    {
    #####: 1171:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1172:			{
        -: 1173:			  if (DEBUG)
        -: 1174:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1175:			}
    #####: 1176:		      break;
        -: 1177:		    }
    #####: 1178:		}
        -: 1179:
    #####: 1180:	    }
        -: 1181:
    #####: 1182:	}
        -: 1183:
        -: 1184:      //discard played card from hand
    #####: 1185:      discardCard(handPos, currentPlayer, state, 0);
        -: 1186:
    #####: 1187:      return 0;
        -: 1188:
        -: 1189:
        -: 1190:    case embargo:
        -: 1191:      //+2 Coins
    #####: 1192:      state->coins = state->coins + 2;
        -: 1193:
        -: 1194:      //see if selected pile is in play
    #####: 1195:      if ( state->supplyCount[choice1] == -1 )
        -: 1196:	{
    #####: 1197:	  return -1;
        -: 1198:	}
        -: 1199:
        -: 1200:      //add embargo token to selected supply pile
    #####: 1201:      state->embargoTokens[choice1]++;
        -: 1202:
        -: 1203:      //trash card
    #####: 1204:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1205:      return 0;
        -: 1206:
        -: 1207:    case outpost:
        -: 1208:      //set outpost flag
    #####: 1209:      state->outpostPlayed++;
        -: 1210:
        -: 1211:      //discard card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    case salvager:
        -: 1216:      //+1 buy
    #####: 1217:      state->numBuys++;
        -: 1218:
    #####: 1219:      if (choice1)
        -: 1220:	{
        -: 1221:	  //gain coins equal to trashed card
    #####: 1222:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1223:	  //trash card
    #####: 1224:	  discardCard(choice1, currentPlayer, state, 1);
    #####: 1225:	}
        -: 1226:
        -: 1227:      //discard card
    #####: 1228:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1229:      return 0;
        -: 1230:
        -: 1231:    case sea_hag:
    #####: 1232:      for (i = 0; i < state->numPlayers; i++){
    #####: 1233:	if (i != currentPlayer){
    #####: 1234:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1235:	  state->discardCount[i]++;
    #####: 1236:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1237:	}
    #####: 1238:      }
    #####: 1239:      return 0;
        -: 1240:
        -: 1241:    case treasure_map:
        -: 1242:      //search hand for another treasure_map
    #####: 1243:      index = -1;
    #####: 1244:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1245:	{
    #####: 1246:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1247:	    {
    #####: 1248:	      index = i;
    #####: 1249:	      break;
        -: 1250:	    }
    #####: 1251:	}
    #####: 1252:      if (index > -1)
        -: 1253:	{
        -: 1254:	  //trash both treasure cards
    #####: 1255:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1256:	  discardCard(index, currentPlayer, state, 1);
        -: 1257:
        -: 1258:	  //gain 4 Gold cards
    #####: 1259:	  for (i = 0; i < 4; i++)
        -: 1260:	    {
    #####: 1261:	      gainCard(gold, state, 1, currentPlayer);
    #####: 1262:	    }
        -: 1263:
        -: 1264:	  //return success
    #####: 1265:	  return 1;
        -: 1266:	}
        -: 1267:
        -: 1268:      //no second treasure_map found in hand
    #####: 1269:      return -1;
        -: 1270:    }
        -: 1271:
    #####: 1272:  return -1;
    10017: 1273:}
        -: 1274:
        -: 1275:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1276:{
        -: 1277:
        -: 1278:  //if card is not trashed, added to Played pile
    20005: 1279:  if (trashFlag < 1)
        -: 1280:    {
        -: 1281:      //add card to played pile
    20005: 1282:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
    20005: 1283:      state->playedCardCount++;
    20005: 1284:    }
        -: 1285:
        -: 1286:  //set played card to -1
    20005: 1287:  state->hand[currentPlayer][handPos] = -1;
        -: 1288:
        -: 1289:  //remove card from player's hand
    20005: 1290:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1291:    {
        -: 1292:      //reduce number of cards in hand
    #####: 1293:      state->handCount[currentPlayer]--;
    #####: 1294:    }
    20005: 1295:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1296:    {
        -: 1297:      //reduce number of cards in hand
    #####: 1298:      state->handCount[currentPlayer]--;
    #####: 1299:    }
        -: 1300:  else
        -: 1301:    {
        -: 1302:      //replace discarded card with last card in hand
    20005: 1303:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1304:      //set last card to -1
    20005: 1305:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1306:      //reduce number of cards in hand
    20005: 1307:      state->handCount[currentPlayer]--;
        -: 1308:    }
        -: 1309:
    20005: 1310:  return 0;
        -: 1311:}
        -: 1312:
        -: 1313:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1314:{
        -: 1315:  //Note: supplyPos is enum of choosen card
        -: 1316:
        -: 1317:  //check if supply pile is empty (0) or card is not used in game (-1)
       80: 1318:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1319:    {
    #####: 1320:      return -1;
        -: 1321:    }
        -: 1322:
        -: 1323:  //added card for [whoseTurn] current player:
        -: 1324:  // toFlag = 0 : add to discard
        -: 1325:  // toFlag = 1 : add to deck
        -: 1326:  // toFlag = 2 : add to hand
        -: 1327:
       80: 1328:  if (toFlag == 1)
        -: 1329:    {
    #####: 1330:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1331:      state->deckCount[player]++;
    #####: 1332:    }
       80: 1333:  else if (toFlag == 2)
        -: 1334:    {
    #####: 1335:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1336:      state->handCount[player]++;
    #####: 1337:    }
        -: 1338:  else
        -: 1339:    {
       80: 1340:      state->discard[player][ state->discardCount[player] ] = supplyPos;
       80: 1341:      state->discardCount[player]++;
        -: 1342:    }
        -: 1343:
        -: 1344:  //decrease number in supply pile
       80: 1345:  state->supplyCount[supplyPos]--;
        -: 1346:
       80: 1347:  return 0;
       80: 1348:}
        -: 1349:
        -: 1350:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1351:{
        -: 1352:  int i;
        -: 1353:
        -: 1354:  //reset coin count
      101: 1355:  state->coins = 0;
        -: 1356:
        -: 1357:  //add coins for each Treasure card in player's hand
     1292: 1358:  for (i = 0; i < state->handCount[player]; i++)
        -: 1359:    {
      545: 1360:      if (state->hand[player][i] == copper)
        -: 1361:	{
      224: 1362:	  state->coins += 1;
      224: 1363:	}
      321: 1364:      else if (state->hand[player][i] == silver)
        -: 1365:	{
      120: 1366:	  state->coins += 2;
      120: 1367:	}
      201: 1368:      else if (state->hand[player][i] == gold)
        -: 1369:	{
       44: 1370:	  state->coins += 3;
       44: 1371:	}
      545: 1372:    }
        -: 1373:
        -: 1374:  //add bonus
      101: 1375:  state->coins += bonus;
        -: 1376:
      101: 1377:  return 0;
        -: 1378:}
        -: 1379:
        -: 1380:
        -: 1381://end of dominion.c
